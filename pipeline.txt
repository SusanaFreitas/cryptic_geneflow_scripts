## RAD analyses ##


useful paths:
reference genomes > ftp://ftpmrr.unil.ch/AsexGenomeEvol/timema/

1) Remove reads that failed Casava files
	script: removereads.sh

2) Read quality
	script: fastqc.sh

3) Check that the barcode and the RAD cutsite are intact, and demultiplexing of the data.
	script: process_stacks.sh

4) cloneFilter to remove PCR duplicates # I won't need this, since there wasn't a step to mark the PCR duplicates.
	skip this step

5) Alignment : BWA better than bowtie (that leaves mores reads out, but test which is best)
	script: 05-mapreads.sh


	helpful oneliners:
	- repeat the same line 88 times in a file
while read line; do for i in {1..88}; do echo "$line"; done; done < inds.end > file


6) SAMTOOLS: sort, filter only aligned reads and index samples (read groups are added during the bwa alignment)
	script: 06-sortfilter.sh

7.1 ) STACKS

filter MAPQ > 30

Call SNPs

# during the analyses Darren (and then I confirmed it in my data) found a problem of adapter contamination.
# This caused that the bwa-mem called several softed-clipping reads (alignments) that belonged to the adapter.
# However, when observing the bam files I found that the reads with the softclipped alignments would map
# into the wrong places, giving a SNP whereas reads without adapters wouldn't present that SNP.



7.2 ) freebayes
- Freebayes does not call only SNPS. The vcf will have to be filtered:
	- keep Only SNPs (break MNPs - multi nucleotide polymorphisms- into SNPs)

$ vcflib vcfallelicprimitives -kg Tge.fb.vcf > Tge.fb.filtmult.vcf
/usr/lib/vcflib/bin/vcfallelicprimitives -kg Tms.fb.vcf > Tge.alprim.vcf
/usr/lib/vcflib/bin/vcfallelicprimitives -kg Tms.trim2.fb.vcf > Tge.trim2.alprim.vcf
/usr/lib/vcflib/bin/vcfallelicprimitives -kg Tms.trim3.fb.vcf > Tge.trim3.alprim.vcf

usage: /usr/lib/vcflib/bin/vcfallelicprimitives [options] [file]

options:
    -m, --use-mnps          Retain MNPs as separate events (default: false).
    -t, --tag-parsed FLAG   Tag records which are split apart of a complex allele with this flag.
    -L, --max-length LEN    Do not manipulate records in which either the ALT or
                            REF is longer than LEN (default: 200).
    -k, --keep-info         Maintain site and allele-level annotations when decomposing.
                            Note that in many cases, such as multisample VCFs, these won't
                            be valid post-decomposition.  For biallelic loci in single-sample
                            VCFs, they should be usable with caution.
    -g, --keep-geno         Maintain genotype-level annotations when decomposing.  Similar
                            caution should be used for this as for --keep-info.

If multiple allelic primitives (gaps or mismatches) are specified in
a single VCF record, split the record into multiple lines, but drop all
INFO fields (unless you choose the -kg options).  Does not handle genotypes (yet).  MNPs are split into
multiple SNPs unless the -m flag is provided.  Records generated by splits have th

--use-best-n-alleles all (default) --min-mapping-quality 30 --min-coverage 5

######################################################################
###### OBSERVE THE NUMBER OF READS PER POSITION IN THE fb vcfs #######
######################################################################
### To decide how to filter the positions, I will plot the read distribution
# per variant and decide the cutoff according to the 10 and 99 quantiles.

#### gatk ####
GenomeAnalysisTK VariantsToTable \
 -R 3_Tms_b3v08.fasta \
 -V Tms.trim2.fb.vcf \
 -F CHROM -F POS -GF GT -GF DP \
 --output Tms.trim2.fb.DP.table

#### BASH ####
for ((i=3; i<=96; i +=2)); do cut -f $i,$((i+1)) Tms.fb.DP.table | awk '$1 != "./." {print $2}' > $i.DP; done
for ((i=3; i<=96; i +=2)); do cut -f $i,$((i+1)) Tms.trim2.fb.DP.table | awk '$1 != "./." {print $2}' > $i.DP; done
for ((i=3; i<=96; i +=2)); do cut -f $i,$((i+1)) Tms.trim3.fb.DP.table | awk '$1 != "./." {print $2}' > $i.DP; done

#### R ####
# define the file names list (10 samples here) 
nameList <- c()
for (i in 3:96) { # 21 - odd number for 10 samples 
  if (i %% 2 ==1) nameList <- append(nameList, paste(i, ".DP", sep=""))
}

qlist <- matrix(nrow = 47, ncol = 3) # define number of samples (10 samples here)
qlist <- data.frame(qlist, row.names=nameList)
colnames(qlist)<-c('5%', '10%', '99%')

#jpeg("Tms.fb.DP.jpeg", height=1600, width=1200)
pdf("Tms.trim3.fb.DP.pdf", height=20, width=15)
par(mar=c(1, 1, 1, 1), cex=1.5, mfrow=c(24,4)) # define number of plots for your sample
for (i in 1:32) {
  DP <- read.table(nameList[i], header = T)
  qlist[i,] <- quantile(DP[,1], c(.05, .1, .99), na.rm=T)
  d <- density(DP[,1], from=0, to=100, bw=1, na.rm =T)
  plot(d, xlim = c(0,100), main=nameList[i], col="blue", xlab = dim(DP)[1], lwd=2)
  abline(v=qlist[i,c(1,3)], col='red', lwd=3)
}
dev.off()

write.table(qlist, "GVCFall.DP.percentiles.txt")

######################################################################
############## Filter by DP - "DP < 8 || DP > 200" ###################
######################################################################

#### gatk ####
GenomeAnalysisTK VariantFiltration \
 -R 3_Tms_b3v08.fasta \
 -V Tms.trim2.fb.vcf \
 --genotype-filter-expression 'DP<8||DP>200' \
 --genotype-filter-name 'DP_8-200' \
 --output Tms.trim2.fb_DPfilter.vcf


	- keep reads DP > 10
	- QUAL > 30 : prob of incorrect read = 1 in 1000; base call accuracy = 99.9%
	- Use home made python script

#! python
import sys
import os
import vcf

vcf_reader = vcf.Reader(open("Tms.alprim.vcf", 'r'))
vcf_writer = vcf.Writer(open('Tms.py.vcf', 'w'), vcf_reader)
# record = vcf_reader.next()
# print record.POS

for record in vcf_reader:
    if record.INFO['DP']>10 and record.QUAL > 30:
        vcf_writer.write_record(record)


	- exclude all sites with 25% or more missing genotypes
vcftools --recode --recode-INFO-all --vcf Tms.py.vcf --max-missing 0.75 --out Tms.missfilt

	- keep Only biallelic SNPs
grep -v 'TYPE=snp,' Tms.missfilt.recode.vcf > Tms.fb.bial.vcf


python vcf_filter.py --output Tms.fb.pyfilt2.vcf Tms.alprim.vcf sq --site-quality 30 dps --depth-per-sample 10 snp-only mgq --genotype-quality 50
AttributeError: 'CallData' object has no attribute 'GQ'

python vcf_filter.py Tms.alprim.vcf sq --site-quality 30 dps --depth-per-sample 10 snp-only > Tms.fb.pyfilt2.vcf


vcf_reader = vcf.Reader(open("Tms.alprim.vcf", 'r'))
vcf_writer = vcf.Writer(open('Tms.pyfilt2.vcf', 'w'), vcf_reader)
for record in vcf_reader:
	for call in record:
		#print(call.data.AD)
		depth=call.data.AD
		print(depth)
# only use biallelic SNPs		
		if len(depth) and sum(depth[0:])>9:
			#vcf_writer.write_record(record)
			print(record)
		else:
			continue






module load UHTS/Quality_control/qualimap/2.2.1
qualimap bamqc -nt 8 -bam Tms9_P2-trim3.filtered.bam -outdir results_folder


GenomeAnalysisTK.jar VariantsToTable \
 -R 3_Tmsb3v08.fasta \
 -V Tms.fb.vcf \
 -F CHROM -F POS -GF GT -GF DP \
 -o Tms.fb.DP.table
